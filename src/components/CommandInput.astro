---
interface Props {
    command: string;
    options: CommandOption[];
}

export enum OptionType {
    Channel,
    Role,
    Message,
    String,
    Boolean,
    Number,
}

export interface CommandOption {
    name: string;
    value: string;
    type: OptionType;
    multiple?: boolean;
    highlight?: boolean;
}

const { command, options = [] } = Astro.props;

const genericHighlightedOption = "text-starboard-600 dark:text-starboard-300";
export const genericMessageLink = "https://discord.com/channels/12..."

const optionTypeClass: Partial<Record<keyof typeof OptionType, string>> = {
    Channel: genericHighlightedOption,
    Role: genericHighlightedOption,
    Message: "text-blue-800 dark:text-blue-500"
};

export const mentionableFormat = (
    option: CommandOption,
    mentionable_indicator: string,
) => {
    return option.multiple
        ? option.value
              .split(" ")
              .map((mentionable) => mentionable_indicator.concat(mentionable))
              .join(" ")
        : mentionable_indicator.concat(option.value);
};

export const formatChannel = (option: CommandOption) =>
    mentionableFormat(option, "#");
export const formatRole = (option: CommandOption) =>
    mentionableFormat(option, "@");

export const formatType = (option: CommandOption, inCopy: boolean = false) => {
    return option.type === OptionType.Role ? formatRole(option) :
        option.type === OptionType.Channel ? formatChannel(option) :
        option.type === OptionType.Message ? inCopy ? " " : genericMessageLink :
        option.value;
};
---

<div
    id="command"
    class="flex-col md:flex-row pl-4 border-[1px] text-sm border-starboard-700/70 dark:border-transparent bg-neutral-50 dark:bg-neutral-900 rounded-md flex items-center text-neutral-950 dark:text-neutral-200"
>
    <div class="flex flex-wrap flex-row gap-x-2 gap-y-1 mx-2 mt-3 md:mb-3 items-center">
        <span class="font-medium">/{command}</span>
        {
            options.map((option) => (
                <span
                    id="option"
                    class="w-fit rounded-md overflow-hidden flex items-center"
                    class:list={option.highlight ? "ring-2 ring-starboard-400 dark:ring-starboard-400" : "ring-1 ring-starboard-700/70 dark:ring-starboard-500/60"}
                >
                    <span class="bg-neutral-200 dark:bg-neutral-700 px-3 self-stretch flex items-center">
                        {option.name}
                    </span>
                    <span
                        class="bg-neutral-50 dark:bg-neutral-950 px-3 py-0.5 rounded-r-md inline-block self-stretch has-[img.emoji]:inline-flex"
                        class:list={
                            /* @ts-expect-error no, I do not care */
                            optionTypeClass[OptionType[option.type]]
                        }
                    >
                        {formatType(option)}
                    </span>
                </span>
            ))
        }
    </div>
    <button
        id="copy-command"
        data-command={JSON.stringify({ command, options })}
        class="bg-starboard-200 hover:bg-starboard-300 dark:bg-starboard-700 dark:hover:bg-starboard-600 text-neutral-900 dark:text-neutral-200 hover:ease-in duration-200 m-auto h-[100%] py-[0.35rem] px-3 rounded-md md:mr-2 my-2 focus:ring-2 focus:ring-starboard-500 dark:focus:ring-starboard-600 ring-offset-1 ring-offset-neutral-50 dark:ring-offset-neutral-800 cursor-pointer shrink-0"
        style="margin-top: 0.5rem"
        aria-label="Copy Command"
    >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 0 0 2.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 0 0-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 0 0-3.375-3.375h-1.5a1.125 1.125 0 0 1-1.125-1.125v-1.5A3.375 3.375 0 0 0 6.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0 0 15 2.25h-1.5a2.251 2.251 0 0 0-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 0 0-9-9Z" />
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 !hidden !mt-0">
            <path stroke-linecap="round" stroke-linejoin="round" d="M11.35 3.836c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75 2.25 2.25 0 0 0-.1-.664m-5.8 0A2.251 2.251 0 0 1 13.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m8.9-4.414c.376.023.75.05 1.124.08 1.131.094 1.976 1.057 1.976 2.192V16.5A2.25 2.25 0 0 1 18 18.75h-2.25m-7.5-10.5H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V18.75m-7.5-10.5h6.375c.621 0 1.125.504 1.125 1.125v9.375m-8.25-3 1.5 1.5 3-3.75" />
        </svg>
    </button>
</div>

<script>
    import {
        type CommandOption,
        formatType,
    } from "./CommandInput.astro";

    const formatCommand = (command: string, options: CommandOption[]) => {
        return "/".concat(
            command,
            " ",
            options
                .map((option) => option.name.concat(":", formatType(option, true)))
                .join(" "),
        );
    };

    document.querySelectorAll("#copy-command").forEach((button) => {
        // @ts-expect-error
        const { command, options } = JSON.parse(button.dataset.command) as {
            command: string;
            options: CommandOption[];
        };
        console.log(command, options);
        button.addEventListener("click", () => {
            const str = formatCommand(command, options);
            console.log(`Copied: ${str}`);
            navigator.clipboard.writeText(str);
            if (button.children[0].classList.contains("!hidden")) return
            button.children[0].classList.add("!hidden");
            button.children[1].classList.remove("!hidden");
            setTimeout(() => {
                button.children[1].classList.add("!hidden");
                button.children[0].classList.remove("!hidden");
            }, 3000);
        });
    });
</script>
